package com.company;

import java.util.Arrays;

public class JC_Lesson_2_Andrew_F {

    public static void main(String[] args) {

        // README. Во все задания я в процессе работы добавил строчки вывода в консоль, чтобы было нагляднее видеть
        //        результат. В условиях этого нет, но я по итогу решил их оставить )))

        //  1. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1,
        //  0, 0 ]. С помощью цикла и условия заменить 0 на 1, 1 на 0

        int[] arr = {1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0};
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                arr[i]++;
            } else {
                arr[i]--;
            }
        }
        System.out.println(Arrays.toString(arr));

        //  2. Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;

        int[] arr2 = new int[8];
        for (int i = 0; i < arr2.length; i++) {
            arr2[i] = 3 * i;
        }
        System.out.println(Arrays.toString(arr2));

        // 3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2;

        int[] arr3 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        for (int i = 0; i < arr3.length; i++) {
            if (arr3[i] < 6) {
                arr3[i] = arr3[i] * 2;
            }
        }
        System.out.println(Arrays.toString(arr3));

        // 4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
        // и с помощью цикла(-ов) заполнить его диагональные элементы единицами;

        int[][] arr4 = new int[5][5];
        for (int i = 0; i < arr4.length; i++) {
            arr4[i][i] = 1;
            arr4[i][arr4.length - i - 1] = 1;
            for (int j = 0; j < arr4.length; j++) {
                System.out.print(arr4[i][j]);
                System.out.print(" ");
            }
            System.out.print("\n");
        }

        //   5. ** Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);

        //   Я полагаю, что у задачи есть более рациональное решение, но так как я его не знаю, я решил други путем - каждый
        //   элемент сравним с каждым. Те, которые прошли все проверки соответственно - макс и мин элементы )

        int[] arr5 = {11, 23, 3, 123, 250, 35, 36, 67, 43, 56, 9};
        for (int i = 0; i < arr5.length; i++) {
            int j = 0;
            while (arr5[i] >= arr5[j + 1]) {
                if ((j + 2) == arr5.length) {
                    System.out.println("Max number - " + arr5[i]);
                    break;
                }
                j++;
            }
            while (arr5[i] <= arr5[j + 1]) {
                if ((j + 2) == arr5.length) {
                    System.out.println("Min number - " + arr5[i]);
                    break;
                }
                j++;
            }
        }

//   6. ** Написать метод, в который передается не пустой одномерный целочисленный массив, метод должен вернуть true,
//   если в массиве есть место, в котором сумма левой и правой части массива равны.
//   Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,
//   граница показана символами ||, эти символы в массив не входят.

        int[] arr6 = {15, 12, 8, 20, 80, 10, 15, 5, 55, 10, 40};
        System.out.println("Check balance = " + checkBalance(arr6));
        // Сам МЕТОД вынес в самый конец кода

//   7. **** Написать метод, которому на вход подается одномерный массив и число n (может быть положительным, или отрицательным),
//   при этом метод должен сместить все элементы массива на n позиций. Элементы смещаются циклично. Для усложнения
//   задачи нельзя пользоваться вспомогательными массивами. Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо)
//   -> [ 3, 1, 2 ]; [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ]. При каком n в какую сторону
//   сдвиг можете выбирать сами.

//          Я знаю, что это не рациональное решение задачи, и да, я тут использовал другой массив (что по условию не рекомендуется).
//      Я решил не смотреть ответ в интернете, я придумать решение самостоятельно. Собственно - это то, до чего я додумался, поэтому
//      так коряво ))) Проблема возникла потому что я напрямую меняю ячейки, когда я дохожу циклом до конца массива, нужно переключаться
//      на начало новым циклом (так как нужно крайние элементы менять на начальные, а тогда счетчик цикла превысит длину массива)
//      НО начальные элементы я уже изменил ранее, поэтому пришлось создать новый массив, чтобы не менять значения
//      исходного массива.
//        Поэтому такая каша, но она как ни странно работает )))


        int[] arr7 = {15, 12, 8, 20, 80, 10, 15, 5, 55, 10, 40};
        int n1 = -115;
        int arrLen = arr7.length;
        int n = checkN(n1, arrLen);

        int[] movedArr = moveArray((arr7), n);;
        System.out.println(Arrays.toString(movedArr));
    }
    // checkN - это дополнительный метод, который позволяет преобразовать число n, если оно больше длинны массива. Например,
    // мы хотим сдвинуть все циклично на 150 ячеек. Деление по модулю сразу отсекает полные обороты такого свига и
    // оставляет число в пределах длинны массива, на которое произойдет реальны сдвиг. Таким образом метод теперь работает
    // дя любого целого числа )))

        static int checkN(int n1, int arrLen){
            if (Math.abs(n1) > arrLen) {
               return n1 % arrLen;
            } return n1;
        }

        static int[] moveArray(int[] arr7, int n) {
            int[] arr8 = Arrays.copyOf(arr7, arr7.length);
            if (n > 0) {
                for (int i = 0; i < arr8.length - n; i++) {
                    arr8[0 + i] = arr7[n + i];
                }
                for (int j = arr8.length - n; j < arr8.length; j++) {
                    arr8[j] = arr7[Math.abs(arr8.length - j - n)];
                }
                return arr8;
            } else if (n < 0){
                for (int i = 1; i <= arr8.length + n; i++) {
                    arr8[arr8.length - i] = arr7[arr8.length + n - i];
                }
                for (int j = 0; j < - n ; j++) {
                    arr8[j] = arr7[Math.abs(arr8.length + j + n)];
                }
                return arr8;
            } else
            return arr8;
        }

    // Это МЕТОД из задания 6.

        static boolean checkBalance(int[] arr6) {
            int sumArr = 0;
            for (int i = 0; i < arr6.length; i++){
                sumArr = sumArr + arr6[i];
            }
            for (int i = 0; i < arr6.length-1; i++){
                if (arr6[0] == sumArr - arr6[0]) {
                return true;
                } else {
                arr6[0]=arr6[0]+arr6[i+1];
                }
            } return false;
        }


}

//    int[] arr8 = Arrays.copyOf(arr7, arr7.length);
//            for (int i = 0; i < arr8.length - n; i++) {
//        arr8[0 + i] = arr7[n + i];
//        }
//        for (int j = arr8.length - n; j < arr8.length; j++) {
//        arr8[j] = arr7[Math.abs(arr8.length - j - n)];
//        }
//        return arr8;
//        }